
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)

function yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)
begin
  (* actions: *)
  case yyruleno of
  1:
                                          ;
  2:
                                 	 	 begin writeln('COMENTARIO= ',yytext);end;

  3:
               					 		 begin return(CMD_CLASS);writeln('CMD_CLASS= ',yytext);end;
  4:
               							 begin return(PR_FLOAT);writeln('PR_FLOAT= ',yytext);end;
  5:
         								 begin return(PR_INT);writeln('PR_INT= ',yytext);end;
  6:
            							 begin return(PR_CHAR);writeln('PR_CHAR= ',yytext);end;

  7:
      									 begin return(PR_IF); writeln('PR_IF= ',yytext);end;
  8:
            							 begin return(PR_ELSE); writeln('PR_ELSE= ',yytext);end;
  9:
      									 begin return(PR_DO); writeln('PR_DO= ',yytext);end;
  10:
               							 begin return(PR_WHILE); writeln('PR_WHILE= ',yytext);end;

  11:
                  						 begin return(CMD_PUBLIC); writeln('CMD_PUBLIC= ',yytext);end;
  12:
                     					 begin return(CMD_PRIVATE); writeln('CMD_PRIVATE= ',yytext);end;


  13:
          								 begin return(OP_AND); writeln('OP_AND= ',yytext);end;
  14:
     									 begin return(OP_NOT); writeln('OP_NOT= ',yytext);end;
  15:
          								 begin return(OP_OR); writeln('OP_OR= ',yytext);end;

  16:
                 						 begin return(ARITM);writeln('ARITM= ',yytext);end;
  17:
                     				     begin return(ARITM2);writeln('ARITM2= ',yytext);end;


  18:
     									 begin return(COMA);writeln('COMA= ',yytext);end;
  19:
     									 begin return(PAR_A);writeln('PAR_A= ',yytext);end;
  20:
     									 begin return(PAR_C);writeln('PAR_C= ',yytext);end;
  21:
     									 begin return(LLAVE_A);writeln('LLAVE_A= ',yytext);end;
  22:
     									 begin return(LLAVE_C);writeln('LLAVE_C= ',yytext);end;
  23:
     									 begin return(PUNTOCOMA);writeln('PUNTOCOMA= ',yytext);end;
  24:
     									 begin return(COMS);writeln('COMS= ',yytext);end;

  25:
          							 	 begin return(MAYORIGUAL);writeln('MAYORIGUAL= ',yytext);end;
  26:
          							 	 begin return(MENORIGUAL);writeln('MENORIGUAL= ',yytext);end;
  27:
     								     begin return(IGUAL);writeln('IGUAL= ',yytext);end;

  28:
       									 begin return(T_CHAR);writeln('T_CHAR=', yytext); end; 
  29:
                              			 begin return(IDENTIF);writeln('IDENTIF= ',yytext); end;

  30:
      									 begin return(T_INT);writeln('T_INT= ',yytext);end;
  31:
                 						 begin return(T_FLOAT);writeln('T_FLOAT= ',yytext);end;

  32:
                						 begin return(ALL);writeln('ALL= ',yytext); end;

  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 135;
yynmatches = 135;
yyntrans   = 150;
yynstates  = 75;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  32,
  { 1: }
  32,
  { 2: }
  1,
  { 3: }
  16,
  { 4: }
  28,
  29,
  32,
  { 5: }
  28,
  29,
  32,
  { 6: }
  28,
  29,
  32,
  { 7: }
  28,
  29,
  32,
  { 8: }
  28,
  29,
  32,
  { 9: }
  28,
  29,
  32,
  { 10: }
  28,
  29,
  32,
  { 11: }
  { 12: }
  14,
  { 13: }
  { 14: }
  16,
  { 15: }
  16,
  { 16: }
  16,
  { 17: }
  18,
  { 18: }
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  { 19: }
  19,
  { 20: }
  20,
  { 21: }
  21,
  { 22: }
  22,
  { 23: }
  23,
  { 24: }
  24,
  { 25: }
  { 26: }
  { 27: }
  27,
  { 28: }
  28,
  29,
  32,
  { 29: }
  30,
  32,
  { 30: }
  { 31: }
  17,
  { 32: }
  29,
  32,
  { 33: }
  29,
  32,
  { 34: }
  29,
  32,
  { 35: }
  29,
  32,
  { 36: }
  29,
  32,
  { 37: }
  7,
  29,
  32,
  { 38: }
  29,
  32,
  { 39: }
  9,
  29,
  32,
  { 40: }
  29,
  32,
  { 41: }
  29,
  32,
  { 42: }
  29,
  32,
  { 43: }
  13,
  { 44: }
  15,
  { 45: }
  25,
  { 46: }
  26,
  { 47: }
  { 48: }
  32,
  { 49: }
  { 50: }
  29,
  32,
  { 51: }
  29,
  32,
  { 52: }
  29,
  32,
  { 53: }
  5,
  29,
  32,
  { 54: }
  29,
  32,
  { 55: }
  29,
  32,
  { 56: }
  29,
  32,
  { 57: }
  29,
  32,
  { 58: }
  31,
  { 59: }
  2,
  { 60: }
  29,
  32,
  { 61: }
  6,
  29,
  32,
  { 62: }
  29,
  32,
  { 63: }
  8,
  29,
  32,
  { 64: }
  29,
  32,
  { 65: }
  29,
  32,
  { 66: }
  29,
  32,
  { 67: }
  3,
  29,
  32,
  { 68: }
  4,
  29,
  32,
  { 69: }
  10,
  29,
  32,
  { 70: }
  29,
  32,
  { 71: }
  29,
  32,
  { 72: }
  11,
  29,
  32,
  { 73: }
  29,
  32,
  { 74: }
  12,
  29,
  32
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
  32,
{ 1: }
  32,
{ 2: }
  1,
{ 3: }
  16,
{ 4: }
  28,
  29,
  32,
{ 5: }
  28,
  29,
  32,
{ 6: }
  28,
  29,
  32,
{ 7: }
  28,
  29,
  32,
{ 8: }
  28,
  29,
  32,
{ 9: }
  28,
  29,
  32,
{ 10: }
  28,
  29,
  32,
{ 11: }
{ 12: }
  14,
{ 13: }
{ 14: }
  16,
{ 15: }
  16,
{ 16: }
  16,
{ 17: }
  18,
{ 18: }
  18,
  19,
  20,
  21,
  22,
  23,
  24,
{ 19: }
  19,
{ 20: }
  20,
{ 21: }
  21,
{ 22: }
  22,
{ 23: }
  23,
{ 24: }
  24,
{ 25: }
{ 26: }
{ 27: }
  27,
{ 28: }
  28,
  29,
  32,
{ 29: }
  30,
  32,
{ 30: }
{ 31: }
  17,
{ 32: }
  29,
  32,
{ 33: }
  29,
  32,
{ 34: }
  29,
  32,
{ 35: }
  29,
  32,
{ 36: }
  29,
  32,
{ 37: }
  7,
  29,
  32,
{ 38: }
  29,
  32,
{ 39: }
  9,
  29,
  32,
{ 40: }
  29,
  32,
{ 41: }
  29,
  32,
{ 42: }
  29,
  32,
{ 43: }
  13,
{ 44: }
  15,
{ 45: }
  25,
{ 46: }
  26,
{ 47: }
{ 48: }
  32,
{ 49: }
{ 50: }
  29,
  32,
{ 51: }
  29,
  32,
{ 52: }
  29,
  32,
{ 53: }
  5,
  29,
  32,
{ 54: }
  29,
  32,
{ 55: }
  29,
  32,
{ 56: }
  29,
  32,
{ 57: }
  29,
  32,
{ 58: }
  31,
{ 59: }
  2,
{ 60: }
  29,
  32,
{ 61: }
  6,
  29,
  32,
{ 62: }
  29,
  32,
{ 63: }
  8,
  29,
  32,
{ 64: }
  29,
  32,
{ 65: }
  29,
  32,
{ 66: }
  29,
  32,
{ 67: }
  3,
  29,
  32,
{ 68: }
  4,
  29,
  32,
{ 69: }
  10,
  29,
  32,
{ 70: }
  29,
  32,
{ 71: }
  29,
  32,
{ 72: }
  11,
  29,
  32,
{ 73: }
  29,
  32,
{ 74: }
  12,
  29,
  32
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ ' ' ]; s: 2),
  ( cc: [ '!' ]; s: 12),
  ( cc: [ '"' ]; s: 18),
  ( cc: [ '&' ]; s: 11),
  ( cc: [ '''' ]; s: 24),
  ( cc: [ '(' ]; s: 19),
  ( cc: [ ')' ]; s: 20),
  ( cc: [ '*' ]; s: 16),
  ( cc: [ '+' ]; s: 14),
  ( cc: [ ',' ]; s: 17),
  ( cc: [ '-' ]; s: 15),
  ( cc: [ '/' ]; s: 3),
  ( cc: [ '0'..'9' ]; s: 29),
  ( cc: [ ';' ]; s: 23),
  ( cc: [ '<' ]; s: 26),
  ( cc: [ '=' ]; s: 27),
  ( cc: [ '>' ]; s: 25),
  ( cc: [ 'A'..'Z','a','b','g','h','j'..'o','q'..'v',
            'x'..'z' ]; s: 28),
  ( cc: [ 'c' ]; s: 4),
  ( cc: [ 'd' ]; s: 8),
  ( cc: [ 'e' ]; s: 7),
  ( cc: [ 'f' ]; s: 5),
  ( cc: [ 'i' ]; s: 6),
  ( cc: [ 'p' ]; s: 10),
  ( cc: [ 'w' ]; s: 9),
  ( cc: [ '{' ]; s: 21),
  ( cc: [ '|' ]; s: 13),
  ( cc: [ '}' ]; s: 22),
{ 1: }
  ( cc: [ ' ' ]; s: 2),
  ( cc: [ '!' ]; s: 12),
  ( cc: [ '"' ]; s: 18),
  ( cc: [ '&' ]; s: 11),
  ( cc: [ '''' ]; s: 24),
  ( cc: [ '(' ]; s: 19),
  ( cc: [ ')' ]; s: 20),
  ( cc: [ '*' ]; s: 16),
  ( cc: [ '+' ]; s: 14),
  ( cc: [ ',' ]; s: 17),
  ( cc: [ '-' ]; s: 15),
  ( cc: [ '/' ]; s: 3),
  ( cc: [ '0'..'9' ]; s: 29),
  ( cc: [ ';' ]; s: 23),
  ( cc: [ '<' ]; s: 26),
  ( cc: [ '=' ]; s: 27),
  ( cc: [ '>' ]; s: 25),
  ( cc: [ 'A'..'Z','a','b','g','h','j'..'o','q'..'v',
            'x'..'z' ]; s: 28),
  ( cc: [ 'c' ]; s: 4),
  ( cc: [ 'd' ]; s: 8),
  ( cc: [ 'e' ]; s: 7),
  ( cc: [ 'f' ]; s: 5),
  ( cc: [ 'i' ]; s: 6),
  ( cc: [ 'p' ]; s: 10),
  ( cc: [ 'w' ]; s: 9),
  ( cc: [ '{' ]; s: 21),
  ( cc: [ '|' ]; s: 13),
  ( cc: [ '}' ]; s: 22),
{ 2: }
  ( cc: [ ' ' ]; s: 2),
{ 3: }
  ( cc: [ '*' ]; s: 30),
  ( cc: [ '=' ]; s: 31),
{ 4: }
  ( cc: [ '0'..'9','A'..'Z','a'..'g','i'..'k','m'..'z' ]; s: 34),
  ( cc: [ 'h' ]; s: 33),
  ( cc: [ 'l' ]; s: 32),
{ 5: }
  ( cc: [ '0'..'9','A'..'Z','a'..'k','m'..'z' ]; s: 34),
  ( cc: [ 'l' ]; s: 35),
{ 6: }
  ( cc: [ '0'..'9','A'..'Z','a'..'e','g'..'m','o'..'z' ]; s: 34),
  ( cc: [ 'f' ]; s: 37),
  ( cc: [ 'n' ]; s: 36),
{ 7: }
  ( cc: [ '0'..'9','A'..'Z','a'..'k','m'..'z' ]; s: 34),
  ( cc: [ 'l' ]; s: 38),
{ 8: }
  ( cc: [ '0'..'9','A'..'Z','a'..'n','p'..'z' ]; s: 34),
  ( cc: [ 'o' ]; s: 39),
{ 9: }
  ( cc: [ '0'..'9','A'..'Z','a'..'g','i'..'z' ]; s: 34),
  ( cc: [ 'h' ]; s: 40),
{ 10: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s','t','v'..'z' ]; s: 34),
  ( cc: [ 'r' ]; s: 42),
  ( cc: [ 'u' ]; s: 41),
{ 11: }
  ( cc: [ '&' ]; s: 43),
{ 12: }
{ 13: }
  ( cc: [ '|' ]; s: 44),
{ 14: }
  ( cc: [ '=' ]; s: 31),
{ 15: }
  ( cc: [ '=' ]; s: 31),
{ 16: }
  ( cc: [ '=' ]; s: 31),
{ 17: }
{ 18: }
{ 19: }
{ 20: }
{ 21: }
{ 22: }
{ 23: }
{ 24: }
{ 25: }
  ( cc: [ '=' ]; s: 45),
{ 26: }
  ( cc: [ '=' ]; s: 46),
{ 27: }
{ 28: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 29: }
  ( cc: [ '.' ]; s: 47),
  ( cc: [ '0'..'9' ]; s: 29),
  ( cc: [ 'A'..'Z','a'..'z' ]; s: 48),
{ 30: }
  ( cc: [ #10,'0'..'9','A'..'Z','a'..'z' ]; s: 30),
  ( cc: [ '*' ]; s: 49),
{ 31: }
{ 32: }
  ( cc: [ '0'..'9','A'..'Z','b'..'z' ]; s: 34),
  ( cc: [ 'a' ]; s: 50),
{ 33: }
  ( cc: [ '0'..'9','A'..'Z','b'..'z' ]; s: 34),
  ( cc: [ 'a' ]; s: 51),
{ 34: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 35: }
  ( cc: [ '0'..'9','A'..'Z','a'..'n','p'..'z' ]; s: 34),
  ( cc: [ 'o' ]; s: 52),
{ 36: }
  ( cc: [ '0'..'9','A'..'Z','a'..'s','u'..'z' ]; s: 34),
  ( cc: [ 't' ]; s: 53),
{ 37: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 38: }
  ( cc: [ '0'..'9','A'..'Z','a'..'r','t'..'z' ]; s: 34),
  ( cc: [ 's' ]; s: 54),
{ 39: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 40: }
  ( cc: [ '0'..'9','A'..'Z','a'..'h','j'..'z' ]; s: 34),
  ( cc: [ 'i' ]; s: 55),
{ 41: }
  ( cc: [ '0'..'9','A'..'Z','a','c'..'z' ]; s: 34),
  ( cc: [ 'b' ]; s: 56),
{ 42: }
  ( cc: [ '0'..'9','A'..'Z','a'..'h','j'..'z' ]; s: 34),
  ( cc: [ 'i' ]; s: 57),
{ 43: }
{ 44: }
{ 45: }
{ 46: }
{ 47: }
  ( cc: [ '0'..'9' ]; s: 58),
{ 48: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 48),
{ 49: }
  ( cc: [ '/' ]; s: 59),
{ 50: }
  ( cc: [ '0'..'9','A'..'Z','a'..'r','t'..'z' ]; s: 34),
  ( cc: [ 's' ]; s: 60),
{ 51: }
  ( cc: [ '0'..'9','A'..'Z','a'..'q','s'..'z' ]; s: 34),
  ( cc: [ 'r' ]; s: 61),
{ 52: }
  ( cc: [ '0'..'9','A'..'Z','b'..'z' ]; s: 34),
  ( cc: [ 'a' ]; s: 62),
{ 53: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 54: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 34),
  ( cc: [ 'e' ]; s: 63),
{ 55: }
  ( cc: [ '0'..'9','A'..'Z','a'..'k','m'..'z' ]; s: 34),
  ( cc: [ 'l' ]; s: 64),
{ 56: }
  ( cc: [ '0'..'9','A'..'Z','a'..'k','m'..'z' ]; s: 34),
  ( cc: [ 'l' ]; s: 65),
{ 57: }
  ( cc: [ '0'..'9','A'..'Z','a'..'u','w'..'z' ]; s: 34),
  ( cc: [ 'v' ]; s: 66),
{ 58: }
  ( cc: [ '0'..'9' ]; s: 58),
{ 59: }
{ 60: }
  ( cc: [ '0'..'9','A'..'Z','a'..'r','t'..'z' ]; s: 34),
  ( cc: [ 's' ]; s: 67),
{ 61: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 62: }
  ( cc: [ '0'..'9','A'..'Z','a'..'s','u'..'z' ]; s: 34),
  ( cc: [ 't' ]; s: 68),
{ 63: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 64: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 34),
  ( cc: [ 'e' ]; s: 69),
{ 65: }
  ( cc: [ '0'..'9','A'..'Z','a'..'h','j'..'z' ]; s: 34),
  ( cc: [ 'i' ]; s: 70),
{ 66: }
  ( cc: [ '0'..'9','A'..'Z','b'..'z' ]; s: 34),
  ( cc: [ 'a' ]; s: 71),
{ 67: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 68: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 69: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 70: }
  ( cc: [ '0'..'9','A'..'Z','a','b','d'..'z' ]; s: 34),
  ( cc: [ 'c' ]; s: 72),
{ 71: }
  ( cc: [ '0'..'9','A'..'Z','a'..'s','u'..'z' ]; s: 34),
  ( cc: [ 't' ]; s: 73),
{ 72: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34),
{ 73: }
  ( cc: [ '0'..'9','A'..'Z','a'..'d','f'..'z' ]; s: 34),
  ( cc: [ 'e' ]; s: 74),
{ 74: }
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 34)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 3,
{ 3: } 4,
{ 4: } 5,
{ 5: } 8,
{ 6: } 11,
{ 7: } 14,
{ 8: } 17,
{ 9: } 20,
{ 10: } 23,
{ 11: } 26,
{ 12: } 26,
{ 13: } 27,
{ 14: } 27,
{ 15: } 28,
{ 16: } 29,
{ 17: } 30,
{ 18: } 31,
{ 19: } 38,
{ 20: } 39,
{ 21: } 40,
{ 22: } 41,
{ 23: } 42,
{ 24: } 43,
{ 25: } 44,
{ 26: } 44,
{ 27: } 44,
{ 28: } 45,
{ 29: } 48,
{ 30: } 50,
{ 31: } 50,
{ 32: } 51,
{ 33: } 53,
{ 34: } 55,
{ 35: } 57,
{ 36: } 59,
{ 37: } 61,
{ 38: } 64,
{ 39: } 66,
{ 40: } 69,
{ 41: } 71,
{ 42: } 73,
{ 43: } 75,
{ 44: } 76,
{ 45: } 77,
{ 46: } 78,
{ 47: } 79,
{ 48: } 79,
{ 49: } 80,
{ 50: } 80,
{ 51: } 82,
{ 52: } 84,
{ 53: } 86,
{ 54: } 89,
{ 55: } 91,
{ 56: } 93,
{ 57: } 95,
{ 58: } 97,
{ 59: } 98,
{ 60: } 99,
{ 61: } 101,
{ 62: } 104,
{ 63: } 106,
{ 64: } 109,
{ 65: } 111,
{ 66: } 113,
{ 67: } 115,
{ 68: } 118,
{ 69: } 121,
{ 70: } 124,
{ 71: } 126,
{ 72: } 128,
{ 73: } 131,
{ 74: } 133
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 3,
{ 3: } 4,
{ 4: } 7,
{ 5: } 10,
{ 6: } 13,
{ 7: } 16,
{ 8: } 19,
{ 9: } 22,
{ 10: } 25,
{ 11: } 25,
{ 12: } 26,
{ 13: } 26,
{ 14: } 27,
{ 15: } 28,
{ 16: } 29,
{ 17: } 30,
{ 18: } 37,
{ 19: } 38,
{ 20: } 39,
{ 21: } 40,
{ 22: } 41,
{ 23: } 42,
{ 24: } 43,
{ 25: } 43,
{ 26: } 43,
{ 27: } 44,
{ 28: } 47,
{ 29: } 49,
{ 30: } 49,
{ 31: } 50,
{ 32: } 52,
{ 33: } 54,
{ 34: } 56,
{ 35: } 58,
{ 36: } 60,
{ 37: } 63,
{ 38: } 65,
{ 39: } 68,
{ 40: } 70,
{ 41: } 72,
{ 42: } 74,
{ 43: } 75,
{ 44: } 76,
{ 45: } 77,
{ 46: } 78,
{ 47: } 78,
{ 48: } 79,
{ 49: } 79,
{ 50: } 81,
{ 51: } 83,
{ 52: } 85,
{ 53: } 88,
{ 54: } 90,
{ 55: } 92,
{ 56: } 94,
{ 57: } 96,
{ 58: } 97,
{ 59: } 98,
{ 60: } 100,
{ 61: } 103,
{ 62: } 105,
{ 63: } 108,
{ 64: } 110,
{ 65: } 112,
{ 66: } 114,
{ 67: } 117,
{ 68: } 120,
{ 69: } 123,
{ 70: } 125,
{ 71: } 127,
{ 72: } 130,
{ 73: } 132,
{ 74: } 135
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 3,
{ 3: } 4,
{ 4: } 5,
{ 5: } 8,
{ 6: } 11,
{ 7: } 14,
{ 8: } 17,
{ 9: } 20,
{ 10: } 23,
{ 11: } 26,
{ 12: } 26,
{ 13: } 27,
{ 14: } 27,
{ 15: } 28,
{ 16: } 29,
{ 17: } 30,
{ 18: } 31,
{ 19: } 38,
{ 20: } 39,
{ 21: } 40,
{ 22: } 41,
{ 23: } 42,
{ 24: } 43,
{ 25: } 44,
{ 26: } 44,
{ 27: } 44,
{ 28: } 45,
{ 29: } 48,
{ 30: } 50,
{ 31: } 50,
{ 32: } 51,
{ 33: } 53,
{ 34: } 55,
{ 35: } 57,
{ 36: } 59,
{ 37: } 61,
{ 38: } 64,
{ 39: } 66,
{ 40: } 69,
{ 41: } 71,
{ 42: } 73,
{ 43: } 75,
{ 44: } 76,
{ 45: } 77,
{ 46: } 78,
{ 47: } 79,
{ 48: } 79,
{ 49: } 80,
{ 50: } 80,
{ 51: } 82,
{ 52: } 84,
{ 53: } 86,
{ 54: } 89,
{ 55: } 91,
{ 56: } 93,
{ 57: } 95,
{ 58: } 97,
{ 59: } 98,
{ 60: } 99,
{ 61: } 101,
{ 62: } 104,
{ 63: } 106,
{ 64: } 109,
{ 65: } 111,
{ 66: } 113,
{ 67: } 115,
{ 68: } 118,
{ 69: } 121,
{ 70: } 124,
{ 71: } 126,
{ 72: } 128,
{ 73: } 131,
{ 74: } 133
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 3,
{ 3: } 4,
{ 4: } 7,
{ 5: } 10,
{ 6: } 13,
{ 7: } 16,
{ 8: } 19,
{ 9: } 22,
{ 10: } 25,
{ 11: } 25,
{ 12: } 26,
{ 13: } 26,
{ 14: } 27,
{ 15: } 28,
{ 16: } 29,
{ 17: } 30,
{ 18: } 37,
{ 19: } 38,
{ 20: } 39,
{ 21: } 40,
{ 22: } 41,
{ 23: } 42,
{ 24: } 43,
{ 25: } 43,
{ 26: } 43,
{ 27: } 44,
{ 28: } 47,
{ 29: } 49,
{ 30: } 49,
{ 31: } 50,
{ 32: } 52,
{ 33: } 54,
{ 34: } 56,
{ 35: } 58,
{ 36: } 60,
{ 37: } 63,
{ 38: } 65,
{ 39: } 68,
{ 40: } 70,
{ 41: } 72,
{ 42: } 74,
{ 43: } 75,
{ 44: } 76,
{ 45: } 77,
{ 46: } 78,
{ 47: } 78,
{ 48: } 79,
{ 49: } 79,
{ 50: } 81,
{ 51: } 83,
{ 52: } 85,
{ 53: } 88,
{ 54: } 90,
{ 55: } 92,
{ 56: } 94,
{ 57: } 96,
{ 58: } 97,
{ 59: } 98,
{ 60: } 100,
{ 61: } 103,
{ 62: } 105,
{ 63: } 108,
{ 64: } 110,
{ 65: } 112,
{ 66: } 114,
{ 67: } 117,
{ 68: } 120,
{ 69: } 123,
{ 70: } 125,
{ 71: } 127,
{ 72: } 130,
{ 73: } 132,
{ 74: } 135
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 29,
{ 2: } 57,
{ 3: } 58,
{ 4: } 60,
{ 5: } 63,
{ 6: } 65,
{ 7: } 68,
{ 8: } 70,
{ 9: } 72,
{ 10: } 74,
{ 11: } 77,
{ 12: } 78,
{ 13: } 78,
{ 14: } 79,
{ 15: } 80,
{ 16: } 81,
{ 17: } 82,
{ 18: } 82,
{ 19: } 82,
{ 20: } 82,
{ 21: } 82,
{ 22: } 82,
{ 23: } 82,
{ 24: } 82,
{ 25: } 82,
{ 26: } 83,
{ 27: } 84,
{ 28: } 84,
{ 29: } 85,
{ 30: } 88,
{ 31: } 90,
{ 32: } 90,
{ 33: } 92,
{ 34: } 94,
{ 35: } 95,
{ 36: } 97,
{ 37: } 99,
{ 38: } 100,
{ 39: } 102,
{ 40: } 103,
{ 41: } 105,
{ 42: } 107,
{ 43: } 109,
{ 44: } 109,
{ 45: } 109,
{ 46: } 109,
{ 47: } 109,
{ 48: } 110,
{ 49: } 111,
{ 50: } 112,
{ 51: } 114,
{ 52: } 116,
{ 53: } 118,
{ 54: } 119,
{ 55: } 121,
{ 56: } 123,
{ 57: } 125,
{ 58: } 127,
{ 59: } 128,
{ 60: } 128,
{ 61: } 130,
{ 62: } 131,
{ 63: } 133,
{ 64: } 134,
{ 65: } 136,
{ 66: } 138,
{ 67: } 140,
{ 68: } 141,
{ 69: } 142,
{ 70: } 143,
{ 71: } 145,
{ 72: } 147,
{ 73: } 148,
{ 74: } 150
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 28,
{ 1: } 56,
{ 2: } 57,
{ 3: } 59,
{ 4: } 62,
{ 5: } 64,
{ 6: } 67,
{ 7: } 69,
{ 8: } 71,
{ 9: } 73,
{ 10: } 76,
{ 11: } 77,
{ 12: } 77,
{ 13: } 78,
{ 14: } 79,
{ 15: } 80,
{ 16: } 81,
{ 17: } 81,
{ 18: } 81,
{ 19: } 81,
{ 20: } 81,
{ 21: } 81,
{ 22: } 81,
{ 23: } 81,
{ 24: } 81,
{ 25: } 82,
{ 26: } 83,
{ 27: } 83,
{ 28: } 84,
{ 29: } 87,
{ 30: } 89,
{ 31: } 89,
{ 32: } 91,
{ 33: } 93,
{ 34: } 94,
{ 35: } 96,
{ 36: } 98,
{ 37: } 99,
{ 38: } 101,
{ 39: } 102,
{ 40: } 104,
{ 41: } 106,
{ 42: } 108,
{ 43: } 108,
{ 44: } 108,
{ 45: } 108,
{ 46: } 108,
{ 47: } 109,
{ 48: } 110,
{ 49: } 111,
{ 50: } 113,
{ 51: } 115,
{ 52: } 117,
{ 53: } 118,
{ 54: } 120,
{ 55: } 122,
{ 56: } 124,
{ 57: } 126,
{ 58: } 127,
{ 59: } 127,
{ 60: } 129,
{ 61: } 130,
{ 62: } 132,
{ 63: } 133,
{ 64: } 135,
{ 65: } 137,
{ 66: } 139,
{ 67: } 140,
{ 68: } 141,
{ 69: } 142,
{ 70: } 144,
{ 71: } 146,
{ 72: } 147,
{ 73: } 149,
{ 74: } 150
);


var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap() then
    begin
      yyclear;
      return(0);
    end;

  if not yydone then goto start;

  yylex := yyretval;

end(*yylex*);


